bool FileServer::prepare_and_send(const std::string& filename, std::optional<std::string> peer_id) {
  try {
    BOOST_LOG_TRIVIAL(info) << "Preparing file: " << filename 
                           << " for " << (peer_id ? "peer " + *peer_id : "broadcast");

    // Create message frame with empty payload stream
    MessageFrame frame;
    // source_id is intentionally left empty
    frame.message_type = MessageType::STORE_FILE;
    frame.payload_stream = std::make_shared<std::stringstream>();
    frame.filename_length = filename.length();

    // Generate and set IV
    crypto::CryptoStream crypto_stream;
    auto iv = crypto_stream.generate_IV();
    frame.iv_.assign(iv.begin(), iv.end());

    // Get file data from store into payload stream
    try {
      store_->get(filename, *frame.payload_stream);
      if (!frame.payload_stream->good()) {
        BOOST_LOG_TRIVIAL(error) << "Failed to get file from store: " << filename;
        return false;
      }
    } catch (const std::exception& e) {
      BOOST_LOG_TRIVIAL(error) << "Error getting file from store: " << e.what();
      return false;
    }

    // Create stream for serialized data
    std::stringstream serialized_stream;

    // Serialize the frame
    if (!codec_->serialize(frame, serialized_stream)) {
      BOOST_LOG_TRIVIAL(error) << "Failed to serialize message frame";
      return false;
    }

    // Send the serialized data
    bool send_success;
    if (peer_id) {
      // Send to specific peer
      BOOST_LOG_TRIVIAL(debug) << "Sending file to peer: " << *peer_id;
      send_success = peer_manager_.send_stream(*peer_id, serialized_stream);
    } else {
      // Broadcast to all peers
      BOOST_LOG_TRIVIAL(debug) << "Broadcasting file to all peers";
      send_success = peer_manager_.broadcast_stream(serialized_stream);
    }

    if (!send_success) {
      BOOST_LOG_TRIVIAL(error) << "Failed to send file: " << filename;
      return false;
    }

    BOOST_LOG_TRIVIAL(info) << "Successfully prepared and sent file: " << filename;
    return true;
  }
  catch (const std::exception& e) {
    BOOST_LOG_TRIVIAL(error) << "Error in prepare_and_send: " << e.what();
    return false;
  }
}