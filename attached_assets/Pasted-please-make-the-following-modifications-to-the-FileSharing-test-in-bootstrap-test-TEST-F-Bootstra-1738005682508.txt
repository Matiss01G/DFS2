please make the following modifications to the FileSharing test in bootstrap_test

TEST_F(BootstrapTest, FileSharing) {
    const uint8_t PEER1_ID = 1, PEER2_ID = 2;
    const uint16_t PEER1_PORT = 3001, PEER2_PORT = 3002;
    const std::string TEST_FILE_CONTENT = "Test file content";
    const std::string TEST_FILENAME = "test.txt";

    std::vector<std::string> peer1_bootstrap_nodes = {};
    std::vector<std::string> peer2_bootstrap_nodes = {ADDRESS + ":3001"};

    Bootstrap peer1(ADDRESS, PEER1_PORT, TEST_KEY, PEER1_ID, peer1_bootstrap_nodes);
    Bootstrap peer2(ADDRESS, PEER2_PORT, TEST_KEY, PEER2_ID, peer2_bootstrap_nodes);

    std::thread peer1_thread([&peer1]() {
        ASSERT_TRUE(peer1.start()) << "Failed to start peer 1";
    });

    std::this_thread::sleep_for(std::chrono::seconds(1));

    std::thread peer2_thread([&peer2]() {
        ASSERT_TRUE(peer2.start()) << "Failed to start peer 2";
    });

    std::this_thread::sleep_for(std::chrono::seconds(1));

    auto& peer1_manager = peer1.get_peer_manager();
    auto& peer2_manager = peer2.get_peer_manager();

    ASSERT_TRUE(peer1_manager.has_peer(PEER2_ID)) << "Peer1 should be connected to Peer2";
    ASSERT_TRUE(peer2_manager.has_peer(PEER1_ID)) << "Peer2 should be connected to Peer1";

    std::stringstream file_content;
    file_content << TEST_FILE_CONTENT;

    auto& file_server1 = peer1.get_file_server();
    ASSERT_TRUE(file_server1.store_file(TEST_FILENAME, file_content)) 
        << "Failed to store file in peer1";

    std::this_thread::sleep_for(std::chrono::seconds(2));

    use file_server1's store.has() method to determine if the file exists locally. Do not use file_server1.get_file()

    use file_server2's store.has() method to determine if the file exists locally. Do not use file_server2.get_file()

    use file_servewr2's store.get() method to retrieve file data and compare it to the initial file data

    peer1_thread.join();
    peer2_thread.join();
}